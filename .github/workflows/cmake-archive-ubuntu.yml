name: Build and Package NeuroTensor (Ubuntu x86_64)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Tag version (e.g., v1.2.3)"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - nt_core
          - nt_types
          - nt_functional
          - nt_functional_cpu
          - nt_matmult
          - nt_linalg
          - nt_svd
          - nt_qr
          - nt_inv
          - nt_column_space
          - nt_null_space
          - nt_ai
          - nt_tda
          - nt_sparse
          - nt_images
          - nt_memory
          - nt_multi_processing
          - nt_fmri
    steps:
      - name: Restore build/ directory cache
        uses: actions/cache@v4
        with:
          path: build/
          key: neurotensor-ubuntu-latest-build-versioned-${{ matrix.target }}-${{ github.event.inputs.version }}

      - name: Check for existing build marker
        id: build-check
        run: |
          if [ -f "build/.built_${{ matrix.target }}" ]; then
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        if: steps.build-check.outputs.skip_build == 'false'
        uses: actions/checkout@v4
        with:
          submodules: recursive


      - name: Configure CMake
        if: steps.build-check.outputs.skip_build == 'false'
        run: >
          cmake -S . -B build
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_INSTALL_PREFIX=package-out
          -DBUILD_MAIN=OFF
      
      - name: Build target ${{ matrix.target }} if not already built
        if: steps.build-check.outputs.skip_build == 'false'
        shell: bash
        run: |
          if [ ! -f "build/.built_${{ matrix.target }}" ]; then
            cmake --build build --target ${{ matrix.target }} --config Release
            echo done > build/.built_${{ matrix.target }}
          fi

      - name: Save updated build cache
        if: steps.build-check.outputs.skip_build == 'false'
        uses: actions/cache/save@v4
        with:
          path: build/
          key: neurotensor-ubuntu-latest-build-versioned-${{ matrix.target }}-${{ github.event.inputs.version }}
      
      - name: Upload builds artifacts 
        uses: actions/upload-artifact@v4
        with:
          name: neurotensor-build-${{ matrix.target }}_artifact
          if-no-files-found: ignore
          path: build/
          retention-days: 1
    
  package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Create build directory
        run: mkdir -p build

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: temp_artifacts

      - name: Print temp_artifacts directory
        run: ls temp_artifacts

      - name: Merge all build artifacts
        shell: bash
        run: |
          for artifact in temp_artifacts/*; do
            if [ -d "$artifact" ]; then
              if rsync -a "${artifact}"/ build; then
                echo "✅ Successfully copied $(basename "$artifact") into build/"
              else
                echo "❌ Failed to copy $(basename "$artifact") into build/"
              fi
            fi
          done



      - name: Print build directory
        run: ls build


      - name: Configure CMake if needed
        shell: bash
        run: |
            rm -f build/CMakeCache.txt
            rm -rf build/CMakeFiles
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DBUILD_MAIN=OFF


      - name: Build neurotensor only
        run: cmake --build build --target neurotensor --config Release

      - name: Checking neurotensor symbols
        run: nm -s build/libneurotensor.a

      - name: Install
        run: cmake --install build --prefix package-out
      
      - name: Archive package
        run: |
          cd package-out
          tar -czvf ../neurotensor-ubuntu-x86_64-${{ github.event.inputs.version }}.tar.gz *

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: "NeuroTensor ${{ github.event.inputs.version }}"
          files: neurotensor-ubuntu-x86_64-${{ github.event.inputs.version }}.tar.gz
          overwrite: true
          fail_on_unmatched_files: false
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

